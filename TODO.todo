**TODO list for Daisho**

Python modules I could use in this project:
  ☐ pprint: Pretty-Print Data Structures
  ☐ calendar: Work with Dates
  ☐ datetime: Date and Time Value Manipulation
  ☐ time: Clock Time
  ☐ statistics: Statistical Calculations (Perhaps for daily/weekly/monthly statistics)
  ☐
Dumping Ground for Features/Thoughts:
    ☐ `list` prints well-spaced columns of data (todo, dead_line, priority, etc.)
      ☐ This feature can use the mongodb feature of sorting data depending on criteria.
    ☐ Statements printed to the terminal should be in color.
      ☐ Change the error `Failed to connect to localhost:27017: [Errno 111] Connection refused` to print in RED.
      ☐ Change the `Welcome to Daisho!` message to print in Green.
    ☐ Add a separate detailed help section, for each of `add`, `search`, and `list`, with examples.
    ☐ Add a note field for `todo` for noting down related stuff to the todo. This can open up `vim` or gedit, if installed.
      ☐ `add` can take in either a todo or note, called with `add note`, and it will call another function to add a note.
      ☐ `add todo` will call a different function (split the todo and note to two functions and call them from `add_tasks()`)
      ☐ The `todo` and `note` functions will be calling respective functions from `daisho_db.py`, which will handle the data inputs.
   ☐ Create a GUI pop-up for GTK desktops like Gnome and XFCE, using the Fedora message bus.
     ☐ Implement in XFCE first.
   ☐ A timer that runs every `N` seconds and use the pop-ups to print the reminders on-screen.
   ☐ Create a GUI pop-up using the Fedora message bus.
   ☐ A scanner which periodically scans the todo list and throws a popup.
   ☐ The `add` jobs section
       ☐ Force the user to put in the date in `add` in a specific format (date-month-year) for the time being, fuzzy input can be added later.
       ☐ The tags should all start with a `#`
       ☐ The priority should be any from a list of pre-defined elements. ['low', 'medium', 'high', 'urgent', ]

TO FIX:
 ☐ Unfortunately, the DB check `mongo_conn()` will be a success even if `mongod` is not running on localhost, if a connection exists. Add a check for service
 ☐ Move logging to a separate file, and call it via import.
 ☐ Check if the logging feature can be used to print to terminal, and remove the `print()` statements.
